#!/bin/bash
#------------------------------------------#
#    _     _     _
#   | |   (_)___| |_ ___ _ __  _ __
#   | |   | / __| __/ _ \ '_ \| '__|
#   | |___| \__ \ ||  __/ | | | |
#   |_____|_|___/\__\___|_| |_|_|
#
# Internet Radio from the command line
# By Jansen Price <jansen.price@gmail.com>
#------------------------------------------#
# Run listenr --help for usage
#------------------------------------------#

: ${DIALOG=dialog}
: ${MPLAYER=mplayer}
: ${MPV=mpv}
: ${CMATRIX=cmatrix}

lversion="listenr-1.2.6"

red() {
    if [ -t 0 ]; then
        printf "\E[31m"
    fi
}
op() {
    if [ -t 0 ]; then
        printf "\E[39;49m"
    fi
}
realpath() (
    # Portable way to get absolute path of file respecting symlinks
    OURPWD=$PWD
    cd "$(dirname "$1")"
    LINK=$(readlink "$(basename "$1")")
    while [ "$LINK" ]; do
        cd "$(dirname "$LINK")"
        LINK=$(readlink "$(basename "$1")")
    done
    REALPATH="$PWD/$(basename "$1")"
    echo $REALPATH
    cd "$OURPWD"
)

DEBUG=false
MATRIX=true
HASDIALOG=false
STREAMWATCH=true
USEMPV=false

SCRIPT=$(realpath "$0")
SCRIPTPATH=`dirname $SCRIPT`
STREAMWATCH_BIN="$SCRIPTPATH/streamwatch"
echo $SCRIPTPATH

CONFIGPATH="$HOME/.config/listenr/stations.conf"

if [ ! -e $CONFIGPATH ]; then
    red;echo "Config file '$CONFIGPATH' not found.";op
    echo "Creating file '$CONFIGPATH' from example"
    mkdir -v "$HOME/.config/listenr"
    cp -v "$SCRIPTPATH/stations.conf.example" "$CONFIGPATH"
fi

OLDIFS="$IFS"
IFS="|"
STATIONOPTS=(`awk 'BEGIN {FS = "|"} {printf "%s|%s|", $1, $2}' $CONFIGPATH`)
STATIONURLS=(`awk 'BEGIN {FS = "|"} {printf "%s|%s|", $1, $3}' $CONFIGPATH`)
STATIONCOLORS=(`awk 'BEGIN {FS = "|"} {printf "%s|%s|", $1, $4}' $CONFIGPATH`)
IFS=$OLDIFS

displayUsage() {
    echo "$lversion - Listen to streaming radio using mplayer"
    echo "Usage: listenr [-d] [-n] [--list] [station]"
    echo '  -d Debug mode (bypass the streamwatch pipe)'
    echo '  -n No matrix animation (cmatrix)'
    echo '  --list List available stations from config file'
    echo
    echo "Available stations are configured in stations.conf file ($CONFIGPATH)."
    echo "mplayer output is piped to streamwatch (included with listenr program) "
    echo "  to display desktop notifications of stream song changes."
    echo "Without a station argument a dialog will present list for selecting a station."
    echo
    echo "Example: listenr ${STATIONOPTS[0]}"
    echo
}

displayStations() {
    echo 'List of available stations:'
    echo '---------------------------'
    for i in $(seq 0 2 $((${#STATIONOPTS[@]} - 2))); do
        echo "${STATIONOPTS[i]}: ${STATIONOPTS[i+1]}"
    done
}

# Handle --help arg
if [ -n "$1" -a "$1" == "--help" ]; then
    displayUsage
    exit 0
fi

# Handle --version arg
if [ -n "$1" -a "$1" == "--version" ]; then
    echo $lversion
    exit 0
fi

# Handle --list arg
if [ -n "$1" -a "$1" == "--list" ]; then
    displayStations
    exit 0
fi

# Process options
while getopts "dn" opt; do
    case $opt in
        d)
            DEBUG=true
            ;;
        n)
            MATRIX=false
            ;;
    esac
done

# Shift off the used args
shift $((OPTIND-1))

# Detect if dialog is available
which $DIALOG > /dev/null
if [ $? -eq 1 ]; then
    HASDIALOG=false
else
    HASDIALOG=true
fi

# Detect if mpv or mplayer is available
which $MPV > /dev/null
if [ $? -eq 1 ]; then
    FOUND_MPV=false
else
    FOUND_MPV=true
    USEMPV=true
fi

which $MPLAYER > /dev/null
if [ $? -eq 1 ]; then
    FOUND_MPLAYER=false
else
    FOUND_MPLAYER=true
fi

if [ $FOUND_MPLAYER == false -a $FOUND_MPV == false ]; then
    red; echo "Error: Cannot find player (tried $MPLAYER and $MPV). You could try brew install mpv"; op
    exit 3
fi

# Detect if cmatrix is available
which $CMATRIX > /dev/null
if [ $? -eq 1 ]; then
    # Turn off if not
    MATRIX=false
fi

# For Macos, determine whether turning off things by default
which 'osascript' > /dev/null
if [ $? -eq 0 ]; then
    # Turn off the matrix on macos
    MATRIX=false
fi

# Process arg
if [ -z $1 ]; then
    if [ $HASDIALOG == true ]; then
        # If no argument is given, let the user choose a station
        # requires dialog
        value=$(dialog --clear --title "listenr" --menu "Select station" 18 50 8 "${STATIONOPTS[@]}" 2>&1 >/dev/tty)
        retval=$?
        case $retval in
            0)
                clear;
                station=$value
            ;;
            1)
                #User chose "Cancel"
                clear
                exit 0
            ;;
            255)
                clear
                exit 255
            ;;
        esac
    else
        red;echo 'No station argument.';op
        echo 'Use listenr <station-name> to stream from specific station'
        echo "Example: listenr ${STATIONOPTS[0]}"
        echo
        displayStations
        exit 1
    fi
else
    station=$1
fi

# Find the station selected in the station data arrays
for i in $(seq 0 $((${#STATIONURLS[@]} - 1))); do
    if [ ${STATIONURLS[i]} == $station ]; then
        desc=${STATIONOPTS[i+1]}
        url=${STATIONURLS[++i]}
        color=${STATIONCOLORS[i]}
    fi
done

# Did not resolve to station
if [ "$url" = "" ]; then
    echo "Station unknown: $station"
    exit 2
fi

echo "Playing station $station - $desc"

# Create command to execute
if [ $USEMPV == true ]; then
    playerCmd="$MPV $url"
else
    userAgent=`$MPLAYER | grep 'MPlayer' | awk '{printf "%s-%s", $1, $2}'`
    playerCmd="$MPLAYER -user-agent \"$lversion/$USER/$userAgent\" -quiet -nolirc -noar -prefer-ipv4 \"$url\""
    echo "Use / and * to adjust volume"
fi

# Run appropriate command based on options
if [ $DEBUG == true ] ; then
    # Debug mode bypasses all other options
    echo $playerCmd
    $playerCmd
else
    if [ $STREAMWATCH == true ] ; then
        # Pipe to streamwatch
        playerCmd="$playerCmd 2>&1 | $STREAMWATCH_BIN \"$desc\""
        echo $playerCmd
    fi

    if [ $MATRIX == true ] ; then
        # Show matrix visualization
        playerCmd="$playerCmd | cmatrix -a -b -C $color -s"
    fi

    eval "$playerCmd"
fi

# Ensure we get back into a sane environment
stty sane
exit 0
