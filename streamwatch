#!/usr/bin/env php
<?php
/**
 * Streamwatch
 *
 * This file is a PHP script that is a companion to listenr.
 * It reads stdin and then uses Linux notify command or macos alerter to alert track
 * changes that are provided along with the Internet Radio stream changes.
 *
 * Usage:
 * $ streamwatch [name-of-stream]
 */

// TODO:
// [ ] Use dotfile for icon, can specify as an arg too
// [ ] Change default icon to something generic
// [ ] Update notify to save text to a file, then add streamwatch -r to redisplay the notification

$streamwatch = new Streamwatch($argv);
$streamwatch->execute();

/**
 * Streamwatch class
 *
 * @package Listenr
 * @author Jansen Price <jansen.price@gmail.com>
 */
class Streamwatch
{
    /**
     * The name of the stream
     *
     * @var string
     */
    public $name = 'listenr';

    /**
     * Current title
     *
     * @var string
     */
    public $title = '';

    /**
     * Previous title
     *
     * @var string
     */
    public $previous_title = '';

    /**
     * Icon
     *
     * @var string
     */
    protected $_icon = 'icons/listenr.png';

    /**
     * Debug mode enabled
     *
     * @var string
     */
    protected $debug_mode = false;

    /**
     * Notify stdout enabled
     *
     * @var string
     */
    protected $notify_stdout_mode = false;

    /**
     * Construct
     *
     * @return void
     */
    public function __construct($argv = [])
    {
        if (DIRECTORY_SEPARATOR != "\\") {
            $this->_homePath = $_SERVER['HOME'] . '/.config/listenr/';
        } else {
            $this->_homePath = $_SERVER['USERPROFILE'] . '\\.config/listenr\\';
        }

        if (!file_exists($this->_homePath)) {
            mkdir($this->_homePath);
        }

        if (realpath($this->_icon) != $this->_icon) {
            $this->_icon = realpath(dirname(__FILE__))
                . DIRECTORY_SEPARATOR . $this->_icon;
        }

        date_default_timezone_set('America/Chicago');

        // Shift off the name of program from args
        $program = array_shift($argv);

        while (count($argv) > 0) {
            $arg = array_shift($argv);
            if ($arg == "-d" || $arg == "--debug") {
                $this->debug_mode = true;
            } elseif ($arg == "-o" || $arg == "--output-notify") {
                $this->notify_stdout_mode = true;
            } else {
                // Argument is the name of the stream to use
                $this->name = $arg;
                $this->title = "Starting stream";
                $this->notify();
            }
        }
    }

    /**
     * Execute
     *
     * @param mixed $handle
     * @return void
     */
    public function execute($handle = null)
    {
        if ($handle === null) {
            $handle = fopen("php://stdin", "r");
        }

        do {
            $this->readline($handle);
        } while (!feof($handle));
    }

    /**
     * Read a line
     *
     * @param resource $handle
     * @return void
     */
    public function readline($handle)
    {
        $encountered_title = false;
        $string = trim(fgets($handle));
        if ($this->debug_mode) {
            $this->log("DEBUG Line encountered: $string");
            print("[" . date("Y-m-d H:i:s") . "] STREAMWATCH DEBUG; Line encountered: $string\n");
        }

        if (preg_match('/^Name\s*: (.*)$/', $string, $matches)) {
            $this->name = $matches[1];
        }

        if (preg_match("/StreamTitle='(.*)';/U", $string, $matches)) {
            $this->title = $matches[1];
            $encountered_title = true;
        }

        if (preg_match("/icy-title: (.*)/", $string, $matches)) {
            $this->title = $matches[1];
            $encountered_title = true;
        }

        if ($encountered_title && $this->title != $this->previous_title) {
            // This prevents it showing the same notification twice
            $this->notify();
            $this->previous_title = $this->title;
        }
    }

    /**
     * Notify on updated title
     *
     * @return void
     */
    public function notify()
    {
        if ($this->notify_stdout_mode) {
            print("[" . date('Y-m-d H:i:s') . "] " . $this->name . " | " . $this->title . "\n");
        }

        if (php_uname('s') == 'Darwin') {
            return $this->notify_macos();
        }

        return $this->notify_linux();
    }

    /**
     * Make notification for linux
     *
     * @return void
     */
    public function notify_linux()
    {
        $cmd = "export DISPLAY=:0 && notify-send";

        if ($this->_icon) {
            $cmd .= " -i \"" . $this->_icon . "\"";
        }

        $cmd .= " \"" . $this->name . "\" \"" . $this->title . "\"";
        $this->log($cmd);

        exec($cmd, $result, $status);

        if ($status != 0) {
            $this->log('Status' . $status);
            if (!empty($result)) {
                $this->log('Output: ' . print_r($result, 1));
            }
        }
    }

    /**
     * Make notification for macos
     *
     * @return void
     */
    public function notify_macos()
    {
        printf("%s > %s ::: %s\n", date('H:i:s'), $this->name, $this->title);

        // For this to work, you must first install alerter from
        // https://github.com/vjeantet/alerter/
        $cmd = "alerter";

        $cmd .= " -title Listenr -timeout 5";

        $cmd .= " -message \"" . $this->name . "\n" . $this->title . "\"";

        if ($this->_icon) {
            $cmd .= " -appIcon \"" . $this->_icon . "\"";
        }

        $this->log($cmd);

        exec($cmd, $result, $status);

        if ($status != 0) {
            $this->log('Status' . $status);
            if (!empty($result)) {
                $this->log('Output: ' . print_r($result, 1));
            }
        }
    }

    /**
     * Log a message to file
     *
     * @param string $message Message
     * @return void
     */
    public function log($message)
    {
        $file = $this->_homePath . DIRECTORY_SEPARATOR . 'streamwatch.log';
        $message = date('Y-m-d H:i:s') . ' -- ' . $message . "\n";
        file_put_contents($file, $message, FILE_APPEND);
    }
}
