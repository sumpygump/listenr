#!/usr/bin/env php
<?php

// TODO:
// [ ] Pass in args for default name (streamwatch --name=streamname)
// [ ] Make a debug mode (-d)
// [ ] Use dotfile for icon, can specify as an arg too
// [ ] Change default icon to something generic
// [ ] Update notify to save text to a file, then add streamwatch -r to redisplay the notification

$streamwatch = new Streamwatch();
$streamwatch->execute();

/**
 * Streamwatch class
 * 
 * @package Listenr
 * @author Jansen Price <jansen.price@nerdery.com>
 * @version $Id$
 */
class Streamwatch
{
    /**
     * The name of the stream
     * 
     * @var string
     */
    public $name = 'listenr';

    /**
     * Current title
     * 
     * @var string
     */
    public $title = '';

    /**
     * Icon
     * 
     * @var string
     */
    //protected $_icon = '/home/jprice/Pictures/icons/method.png';
    protected $_icon = 'icons/listenr.png';

    /**
     * Construct
     * 
     * @return void
     */
    public function __construct()
    {
        if (DIRECTORY_SEPARATOR != "\\") {
            $this->_homePath = $_SERVER['HOME'] . '/.listenr/';
        } else {
            $this->_homePath = $_SERVER['USERPROFILE'] . '\\.listenr\\';
        }

        if (!file_exists($this->_homePath)) {
            mkdir($this->_homePath);
        }

        if (realpath($this->_icon) != $this->_icon) {
            $this->_icon = realpath(dirname(__FILE__))
                . DIRECTORY_SEPARATOR . $this->_icon;
        }
    }

    /**
     * Execute
     * 
     * @param mixed $handle
     * @return void
     */
    public function execute($handle = null)
    {
        if ($handle === null) {
            $handle = fopen("php://stdin", "r");
        }

        do {
            $this->readline($handle);
        } while (!feof($handle));
    }

    /**
     * Read a line
     * 
     * @param resource $handle
     * @return void
     */
    public function readline($handle)
    {
        $string = trim(fgets($handle));

        if (preg_match('/^Name\s*: (.*)$/', $string, $matches)) {
            $this->name = $matches[1];
        }

        if (preg_match("/StreamTitle='(.*)';/U", $string, $matches)) {
            $this->title = $matches[1];
            $this->notify();
        }
    }

    /**
     * Notify on updated title
     * 
     * @return void
     */
    public function notify()
    {
        $cmd = "export DISPLAY=:0 && notify-send";

        if ($this->_icon) {
            $cmd .= " -i \"" . $this->_icon . "\"";
        }

        $cmd .= " \"" . $this->name . "\" \"" . $this->title . "\"";
        $this->log($cmd);

        exec($cmd, $result, $status);

        if (!empty($result)) {
            $this->log('Output: ' . print_r($result, 1));
        }

        if ($status != 0) {
            $this->log('Status' . $status);
        }
    }

    /**
     * Log a message to file
     * 
     * @param mixed $message Message
     * @return void
     */
    public function log($message)
    {
        $file = $this->_homePath . DIRECTORY_SEPARATOR . 'streamwatch.log';
        $message = date('Y-m-d H:i:s') . ' -- ' . $message . "\n";
        file_put_contents($file, $message, FILE_APPEND);
    }
}
